/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'TestSerialMsg'
 * message type.
 */

public class TestSerialMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 20;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 137;

    /** Create a new TestSerialMsg of size 20. */
    public TestSerialMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new TestSerialMsg of the given data_length. */
    public TestSerialMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg with the given data_length
     * and base offset.
     */
    public TestSerialMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg using the given byte array
     * as backing store.
     */
    public TestSerialMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public TestSerialMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public TestSerialMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg embedded in the given message
     * at the given base offset.
     */
    public TestSerialMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg embedded in the given message
     * at the given base offset and length.
     */
    public TestSerialMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <TestSerialMsg> \n";
      try {
        s += "  [commander=0x"+Long.toHexString(get_commander())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [nodeid1=0x"+Long.toHexString(get_nodeid1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [nodeid2=0x"+Long.toHexString(get_nodeid2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [quality1=0x"+Long.toHexString(get_quality1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [quality2=0x"+Long.toHexString(get_quality2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [rssi1=0x"+Long.toHexString(get_rssi1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [rssi2=0x"+Long.toHexString(get_rssi2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [result1=0x"+Long.toHexString(get_result1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [result2=0x"+Long.toHexString(get_result2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [capture1=0x"+Long.toHexString(get_capture1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [capture2=0x"+Long.toHexString(get_capture2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: commander
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'commander' is signed (false).
     */
    public static boolean isSigned_commander() {
        return false;
    }

    /**
     * Return whether the field 'commander' is an array (false).
     */
    public static boolean isArray_commander() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'commander'
     */
    public static int offset_commander() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'commander'
     */
    public static int offsetBits_commander() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'commander'
     */
    public int get_commander() {
        return (int)getUIntBEElement(offsetBits_commander(), 16);
    }

    /**
     * Set the value of the field 'commander'
     */
    public void set_commander(int value) {
        setUIntBEElement(offsetBits_commander(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'commander'
     */
    public static int size_commander() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'commander'
     */
    public static int sizeBits_commander() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeid1
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeid1' is signed (false).
     */
    public static boolean isSigned_nodeid1() {
        return false;
    }

    /**
     * Return whether the field 'nodeid1' is an array (false).
     */
    public static boolean isArray_nodeid1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeid1'
     */
    public static int offset_nodeid1() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeid1'
     */
    public static int offsetBits_nodeid1() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'nodeid1'
     */
    public int get_nodeid1() {
        return (int)getUIntBEElement(offsetBits_nodeid1(), 16);
    }

    /**
     * Set the value of the field 'nodeid1'
     */
    public void set_nodeid1(int value) {
        setUIntBEElement(offsetBits_nodeid1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeid1'
     */
    public static int size_nodeid1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeid1'
     */
    public static int sizeBits_nodeid1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeid2
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeid2' is signed (false).
     */
    public static boolean isSigned_nodeid2() {
        return false;
    }

    /**
     * Return whether the field 'nodeid2' is an array (false).
     */
    public static boolean isArray_nodeid2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeid2'
     */
    public static int offset_nodeid2() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeid2'
     */
    public static int offsetBits_nodeid2() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'nodeid2'
     */
    public int get_nodeid2() {
        return (int)getUIntBEElement(offsetBits_nodeid2(), 16);
    }

    /**
     * Set the value of the field 'nodeid2'
     */
    public void set_nodeid2(int value) {
        setUIntBEElement(offsetBits_nodeid2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeid2'
     */
    public static int size_nodeid2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeid2'
     */
    public static int sizeBits_nodeid2() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: quality1
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'quality1' is signed (false).
     */
    public static boolean isSigned_quality1() {
        return false;
    }

    /**
     * Return whether the field 'quality1' is an array (false).
     */
    public static boolean isArray_quality1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'quality1'
     */
    public static int offset_quality1() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'quality1'
     */
    public static int offsetBits_quality1() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'quality1'
     */
    public int get_quality1() {
        return (int)getUIntBEElement(offsetBits_quality1(), 16);
    }

    /**
     * Set the value of the field 'quality1'
     */
    public void set_quality1(int value) {
        setUIntBEElement(offsetBits_quality1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'quality1'
     */
    public static int size_quality1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'quality1'
     */
    public static int sizeBits_quality1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: quality2
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'quality2' is signed (false).
     */
    public static boolean isSigned_quality2() {
        return false;
    }

    /**
     * Return whether the field 'quality2' is an array (false).
     */
    public static boolean isArray_quality2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'quality2'
     */
    public static int offset_quality2() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'quality2'
     */
    public static int offsetBits_quality2() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'quality2'
     */
    public int get_quality2() {
        return (int)getUIntBEElement(offsetBits_quality2(), 16);
    }

    /**
     * Set the value of the field 'quality2'
     */
    public void set_quality2(int value) {
        setUIntBEElement(offsetBits_quality2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'quality2'
     */
    public static int size_quality2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'quality2'
     */
    public static int sizeBits_quality2() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: rssi1
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'rssi1' is signed (false).
     */
    public static boolean isSigned_rssi1() {
        return false;
    }

    /**
     * Return whether the field 'rssi1' is an array (false).
     */
    public static boolean isArray_rssi1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'rssi1'
     */
    public static int offset_rssi1() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'rssi1'
     */
    public static int offsetBits_rssi1() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'rssi1'
     */
    public int get_rssi1() {
        return (int)getUIntBEElement(offsetBits_rssi1(), 16);
    }

    /**
     * Set the value of the field 'rssi1'
     */
    public void set_rssi1(int value) {
        setUIntBEElement(offsetBits_rssi1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'rssi1'
     */
    public static int size_rssi1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'rssi1'
     */
    public static int sizeBits_rssi1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: rssi2
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'rssi2' is signed (false).
     */
    public static boolean isSigned_rssi2() {
        return false;
    }

    /**
     * Return whether the field 'rssi2' is an array (false).
     */
    public static boolean isArray_rssi2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'rssi2'
     */
    public static int offset_rssi2() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'rssi2'
     */
    public static int offsetBits_rssi2() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'rssi2'
     */
    public int get_rssi2() {
        return (int)getUIntBEElement(offsetBits_rssi2(), 16);
    }

    /**
     * Set the value of the field 'rssi2'
     */
    public void set_rssi2(int value) {
        setUIntBEElement(offsetBits_rssi2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'rssi2'
     */
    public static int size_rssi2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'rssi2'
     */
    public static int sizeBits_rssi2() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: result1
    //   Field type: int, unsigned
    //   Offset (bits): 112
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'result1' is signed (false).
     */
    public static boolean isSigned_result1() {
        return false;
    }

    /**
     * Return whether the field 'result1' is an array (false).
     */
    public static boolean isArray_result1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'result1'
     */
    public static int offset_result1() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'result1'
     */
    public static int offsetBits_result1() {
        return 112;
    }

    /**
     * Return the value (as a int) of the field 'result1'
     */
    public int get_result1() {
        return (int)getUIntBEElement(offsetBits_result1(), 16);
    }

    /**
     * Set the value of the field 'result1'
     */
    public void set_result1(int value) {
        setUIntBEElement(offsetBits_result1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'result1'
     */
    public static int size_result1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'result1'
     */
    public static int sizeBits_result1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: result2
    //   Field type: int, unsigned
    //   Offset (bits): 128
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'result2' is signed (false).
     */
    public static boolean isSigned_result2() {
        return false;
    }

    /**
     * Return whether the field 'result2' is an array (false).
     */
    public static boolean isArray_result2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'result2'
     */
    public static int offset_result2() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'result2'
     */
    public static int offsetBits_result2() {
        return 128;
    }

    /**
     * Return the value (as a int) of the field 'result2'
     */
    public int get_result2() {
        return (int)getUIntBEElement(offsetBits_result2(), 16);
    }

    /**
     * Set the value of the field 'result2'
     */
    public void set_result2(int value) {
        setUIntBEElement(offsetBits_result2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'result2'
     */
    public static int size_result2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'result2'
     */
    public static int sizeBits_result2() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: capture1
    //   Field type: short, unsigned
    //   Offset (bits): 144
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'capture1' is signed (false).
     */
    public static boolean isSigned_capture1() {
        return false;
    }

    /**
     * Return whether the field 'capture1' is an array (false).
     */
    public static boolean isArray_capture1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'capture1'
     */
    public static int offset_capture1() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'capture1'
     */
    public static int offsetBits_capture1() {
        return 144;
    }

    /**
     * Return the value (as a short) of the field 'capture1'
     */
    public short get_capture1() {
        return (short)getUIntBEElement(offsetBits_capture1(), 8);
    }

    /**
     * Set the value of the field 'capture1'
     */
    public void set_capture1(short value) {
        setUIntBEElement(offsetBits_capture1(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'capture1'
     */
    public static int size_capture1() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'capture1'
     */
    public static int sizeBits_capture1() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: capture2
    //   Field type: short, unsigned
    //   Offset (bits): 152
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'capture2' is signed (false).
     */
    public static boolean isSigned_capture2() {
        return false;
    }

    /**
     * Return whether the field 'capture2' is an array (false).
     */
    public static boolean isArray_capture2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'capture2'
     */
    public static int offset_capture2() {
        return (152 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'capture2'
     */
    public static int offsetBits_capture2() {
        return 152;
    }

    /**
     * Return the value (as a short) of the field 'capture2'
     */
    public short get_capture2() {
        return (short)getUIntBEElement(offsetBits_capture2(), 8);
    }

    /**
     * Set the value of the field 'capture2'
     */
    public void set_capture2(short value) {
        setUIntBEElement(offsetBits_capture2(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'capture2'
     */
    public static int size_capture2() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'capture2'
     */
    public static int sizeBits_capture2() {
        return 8;
    }

}
