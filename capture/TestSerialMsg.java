/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'TestSerialMsg'
 * message type.
 */

public class TestSerialMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 218;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 137;

    /** Create a new TestSerialMsg of size 218. */
    public TestSerialMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new TestSerialMsg of the given data_length. */
    public TestSerialMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg with the given data_length
     * and base offset.
     */
    public TestSerialMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg using the given byte array
     * as backing store.
     */
    public TestSerialMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public TestSerialMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public TestSerialMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg embedded in the given message
     * at the given base offset.
     */
    public TestSerialMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg embedded in the given message
     * at the given base offset and length.
     */
    public TestSerialMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <TestSerialMsg> \n";
      try {
        s += "  [commander=0x"+Long.toHexString(get_commander())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [nodeid1=0x"+Long.toHexString(get_nodeid1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [nodeid2=0x"+Long.toHexString(get_nodeid2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [stage=0x"+Long.toHexString(get_stage())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [countcapture1=0x"+Long.toHexString(get_countcapture1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [countcapture2=0x"+Long.toHexString(get_countcapture2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [serialno=0x"+Long.toHexString(get_serialno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [capture1=0x"+Long.toHexString(get_capture1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [capture2=0x"+Long.toHexString(get_capture2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [nbr1capture=";
        for (int i = 0; i < 100; i++) {
          s += "0x"+Long.toHexString(getElement_nbr1capture(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: commander
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'commander' is signed (false).
     */
    public static boolean isSigned_commander() {
        return false;
    }

    /**
     * Return whether the field 'commander' is an array (false).
     */
    public static boolean isArray_commander() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'commander'
     */
    public static int offset_commander() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'commander'
     */
    public static int offsetBits_commander() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'commander'
     */
    public int get_commander() {
        return (int)getUIntBEElement(offsetBits_commander(), 16);
    }

    /**
     * Set the value of the field 'commander'
     */
    public void set_commander(int value) {
        setUIntBEElement(offsetBits_commander(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'commander'
     */
    public static int size_commander() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'commander'
     */
    public static int sizeBits_commander() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeid1
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeid1' is signed (false).
     */
    public static boolean isSigned_nodeid1() {
        return false;
    }

    /**
     * Return whether the field 'nodeid1' is an array (false).
     */
    public static boolean isArray_nodeid1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeid1'
     */
    public static int offset_nodeid1() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeid1'
     */
    public static int offsetBits_nodeid1() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'nodeid1'
     */
    public int get_nodeid1() {
        return (int)getUIntBEElement(offsetBits_nodeid1(), 16);
    }

    /**
     * Set the value of the field 'nodeid1'
     */
    public void set_nodeid1(int value) {
        setUIntBEElement(offsetBits_nodeid1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeid1'
     */
    public static int size_nodeid1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeid1'
     */
    public static int sizeBits_nodeid1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeid2
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeid2' is signed (false).
     */
    public static boolean isSigned_nodeid2() {
        return false;
    }

    /**
     * Return whether the field 'nodeid2' is an array (false).
     */
    public static boolean isArray_nodeid2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeid2'
     */
    public static int offset_nodeid2() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeid2'
     */
    public static int offsetBits_nodeid2() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'nodeid2'
     */
    public int get_nodeid2() {
        return (int)getUIntBEElement(offsetBits_nodeid2(), 16);
    }

    /**
     * Set the value of the field 'nodeid2'
     */
    public void set_nodeid2(int value) {
        setUIntBEElement(offsetBits_nodeid2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeid2'
     */
    public static int size_nodeid2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeid2'
     */
    public static int sizeBits_nodeid2() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: stage
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'stage' is signed (false).
     */
    public static boolean isSigned_stage() {
        return false;
    }

    /**
     * Return whether the field 'stage' is an array (false).
     */
    public static boolean isArray_stage() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'stage'
     */
    public static int offset_stage() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'stage'
     */
    public static int offsetBits_stage() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'stage'
     */
    public int get_stage() {
        return (int)getUIntBEElement(offsetBits_stage(), 16);
    }

    /**
     * Set the value of the field 'stage'
     */
    public void set_stage(int value) {
        setUIntBEElement(offsetBits_stage(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'stage'
     */
    public static int size_stage() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'stage'
     */
    public static int sizeBits_stage() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: countcapture1
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'countcapture1' is signed (false).
     */
    public static boolean isSigned_countcapture1() {
        return false;
    }

    /**
     * Return whether the field 'countcapture1' is an array (false).
     */
    public static boolean isArray_countcapture1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'countcapture1'
     */
    public static int offset_countcapture1() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'countcapture1'
     */
    public static int offsetBits_countcapture1() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'countcapture1'
     */
    public int get_countcapture1() {
        return (int)getUIntBEElement(offsetBits_countcapture1(), 16);
    }

    /**
     * Set the value of the field 'countcapture1'
     */
    public void set_countcapture1(int value) {
        setUIntBEElement(offsetBits_countcapture1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'countcapture1'
     */
    public static int size_countcapture1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'countcapture1'
     */
    public static int sizeBits_countcapture1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: countcapture2
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'countcapture2' is signed (false).
     */
    public static boolean isSigned_countcapture2() {
        return false;
    }

    /**
     * Return whether the field 'countcapture2' is an array (false).
     */
    public static boolean isArray_countcapture2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'countcapture2'
     */
    public static int offset_countcapture2() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'countcapture2'
     */
    public static int offsetBits_countcapture2() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'countcapture2'
     */
    public int get_countcapture2() {
        return (int)getUIntBEElement(offsetBits_countcapture2(), 16);
    }

    /**
     * Set the value of the field 'countcapture2'
     */
    public void set_countcapture2(int value) {
        setUIntBEElement(offsetBits_countcapture2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'countcapture2'
     */
    public static int size_countcapture2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'countcapture2'
     */
    public static int sizeBits_countcapture2() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: serialno
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'serialno' is signed (false).
     */
    public static boolean isSigned_serialno() {
        return false;
    }

    /**
     * Return whether the field 'serialno' is an array (false).
     */
    public static boolean isArray_serialno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'serialno'
     */
    public static int offset_serialno() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'serialno'
     */
    public static int offsetBits_serialno() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'serialno'
     */
    public int get_serialno() {
        return (int)getUIntBEElement(offsetBits_serialno(), 16);
    }

    /**
     * Set the value of the field 'serialno'
     */
    public void set_serialno(int value) {
        setUIntBEElement(offsetBits_serialno(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'serialno'
     */
    public static int size_serialno() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'serialno'
     */
    public static int sizeBits_serialno() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: capture1
    //   Field type: int, unsigned
    //   Offset (bits): 112
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'capture1' is signed (false).
     */
    public static boolean isSigned_capture1() {
        return false;
    }

    /**
     * Return whether the field 'capture1' is an array (false).
     */
    public static boolean isArray_capture1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'capture1'
     */
    public static int offset_capture1() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'capture1'
     */
    public static int offsetBits_capture1() {
        return 112;
    }

    /**
     * Return the value (as a int) of the field 'capture1'
     */
    public int get_capture1() {
        return (int)getUIntBEElement(offsetBits_capture1(), 16);
    }

    /**
     * Set the value of the field 'capture1'
     */
    public void set_capture1(int value) {
        setUIntBEElement(offsetBits_capture1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'capture1'
     */
    public static int size_capture1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'capture1'
     */
    public static int sizeBits_capture1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: capture2
    //   Field type: int, unsigned
    //   Offset (bits): 128
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'capture2' is signed (false).
     */
    public static boolean isSigned_capture2() {
        return false;
    }

    /**
     * Return whether the field 'capture2' is an array (false).
     */
    public static boolean isArray_capture2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'capture2'
     */
    public static int offset_capture2() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'capture2'
     */
    public static int offsetBits_capture2() {
        return 128;
    }

    /**
     * Return the value (as a int) of the field 'capture2'
     */
    public int get_capture2() {
        return (int)getUIntBEElement(offsetBits_capture2(), 16);
    }

    /**
     * Set the value of the field 'capture2'
     */
    public void set_capture2(int value) {
        setUIntBEElement(offsetBits_capture2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'capture2'
     */
    public static int size_capture2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'capture2'
     */
    public static int sizeBits_capture2() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nbr1capture
    //   Field type: int[], unsigned
    //   Offset (bits): 144
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nbr1capture' is signed (false).
     */
    public static boolean isSigned_nbr1capture() {
        return false;
    }

    /**
     * Return whether the field 'nbr1capture' is an array (true).
     */
    public static boolean isArray_nbr1capture() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'nbr1capture'
     */
    public static int offset_nbr1capture(int index1) {
        int offset = 144;
        if (index1 < 0 || index1 >= 100) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nbr1capture'
     */
    public static int offsetBits_nbr1capture(int index1) {
        int offset = 144;
        if (index1 < 0 || index1 >= 100) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'nbr1capture' as a int[]
     */
    public int[] get_nbr1capture() {
        int[] tmp = new int[100];
        for (int index0 = 0; index0 < numElements_nbr1capture(0); index0++) {
            tmp[index0] = getElement_nbr1capture(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'nbr1capture' from the given int[]
     */
    public void set_nbr1capture(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_nbr1capture(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'nbr1capture'
     */
    public int getElement_nbr1capture(int index1) {
        return (int)getUIntBEElement(offsetBits_nbr1capture(index1), 16);
    }

    /**
     * Set an element of the array 'nbr1capture'
     */
    public void setElement_nbr1capture(int index1, int value) {
        setUIntBEElement(offsetBits_nbr1capture(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'nbr1capture'
     */
    public static int totalSize_nbr1capture() {
        return (1600 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'nbr1capture'
     */
    public static int totalSizeBits_nbr1capture() {
        return 1600;
    }

    /**
     * Return the size, in bytes, of each element of the array 'nbr1capture'
     */
    public static int elementSize_nbr1capture() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'nbr1capture'
     */
    public static int elementSizeBits_nbr1capture() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'nbr1capture'
     */
    public static int numDimensions_nbr1capture() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'nbr1capture'
     */
    public static int numElements_nbr1capture() {
        return 100;
    }

    /**
     * Return the number of elements in the array 'nbr1capture'
     * for the given dimension.
     */
    public static int numElements_nbr1capture(int dimension) {
      int array_dims[] = { 100,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
